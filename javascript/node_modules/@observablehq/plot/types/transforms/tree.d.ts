/**
 * Based on the tree options described above, populates the **x** and **y**
 * channels with the positions for each node. The following defaults are also
 * applied: the default **frameAnchor** inherits the **treeAnchor**. This
 * transform is intended to be used with
 * [dot](https://github.com/observablehq/plot/blob/main/README.md#dot),
 * [text](https://github.com/observablehq/plot/blob/main/README.md#text), and
 * other point-based marks. This transform is rarely used directly; see the
 * [Plot.tree compound
 * mark](https://github.com/observablehq/plot/blob/main/README.md#plottreedata-options).
 *
 * The treeNode transform will derive output columns for any *options* that have
 * one of the following named node values:
 *
 * * *node:name* - the node’s name (the last part of its path)
 * * *node:path* - the node’s full, normalized, slash-separated path
 * * *node:internal* - true if the node is internal, or false for leaves
 * * *node:depth* - the distance from the node to the root
 * * *node:height* - the distance from the node to its deepest descendant
 *
 * In addition, if any option value is specified as an object with a **node**
 * method, a derived output column will be generated by invoking the **node**
 * method for each node in the tree.
 */
export function treeNode(options?: {}): any;
/**
 * Based on the tree options described above, populates the **x1**, **y1**,
 * **x2**, and **y2** channels. The following defaults are also applied: the
 * default **curve** is *bump-x*, the default **stroke** is #555, the default
 * **strokeWidth** is 1.5, and the default **strokeOpacity** is 0.5. This
 * transform is intended to be used with
 * [link](https://github.com/observablehq/plot/blob/main/README.md#link),
 * [arrow](https://github.com/observablehq/plot/blob/main/README.md#arrow), and
 * other two-point-based marks. This transform is rarely used directly; see the
 * [Plot.tree compound
 * mark](https://github.com/observablehq/plot/blob/main/README.md#plottreedata-options).
 *
 * The treeLink transform will derive output columns for any *options* that have
 * one of the following named link values:
 *
 * * *node:name* - the child node’s name (the last part of its path)
 * * *node:path* - the child node’s full, normalized, slash-separated path
 * * *node:internal* - true if the child node is internal, or false for leaves
 * * *node:depth* - the distance from the child node to the root
 * * *node:height* - the distance from the child node to its deepest descendant
 * * *parent:name* - the parent node’s name (the last part of its path)
 * * *parent:path* - the parent node’s full, normalized, slash-separated path
 * * *parent:depth* - the distance from the parent node to the root
 * * *parent:height* - the distance from the parent node to its deepest
 *   descendant
 *
 * In addition, if any option value is specified as an object with a **node**
 * method, a derived output column will be generated by invoking the **node**
 * method for each child node in the tree; likewise if any option value is
 * specified as an object with a **link** method, a derived output column will
 * be generated by invoking the **link** method for each link in the tree, being
 * passed two node arguments, the child and the parent.
 */
export function treeLink(options?: {}): any;
export function maybeTreeAnchor(anchor?: string): {
    frameAnchor: string;
    dx: number;
    position({ x, y }: {
        x: any;
        y: any;
    }, i: any, X: any, Y: any): void;
};
