/**
 * ```js
 * Plot.stackX({y: "year", x: "revenue", z: "format", fill: "group"})
 * ```
 *
 * See Plot.stackY, but with *x* as the input value channel, *y* as the stack
 * index, *x1*, *x2* and *x* as the output channels.
 *
 * @link https://github.com/observablehq/plot/blob/main/README.md#stack
 */
export function stackX(stack?: {}, options?: {}, ...args: any[]): any;
/**
 * ```js
 * Plot.stackX1({y: "year", x: "revenue", z: "format", fill: "group"})
 * ```
 *
 * Equivalent to
 * [Plot.stackX](https://github.com/observablehq/plot/blob/main/README.md#plotstackxstack-options),
 * except that the **x1** channel is returned as the **x** channel. This can be
 * used, for example, to draw a line at the left edge of each stacked area.
 *
 * @link https://github.com/observablehq/plot/blob/main/README.md#stack
 */
export function stackX1(stack?: {}, options?: {}, ...args: any[]): any;
/**
 * ```js
 * Plot.stackX2({y: "year", x: "revenue", z: "format", fill: "group"})
 * ```
 *
 * Equivalent to
 * [Plot.stackX](https://github.com/observablehq/plot/blob/main/README.md#plotstackxstack-options),
 * except that the **x2** channel is returned as the **x** channel. This can be
 * used, for example, to draw a line at the right edge of each stacked area.
 *
 * @link https://github.com/observablehq/plot/blob/main/README.md#stack
 */
export function stackX2(stack?: {}, options?: {}, ...args: any[]): any;
/**
 * ```js
 * Plot.stackY({x: "year", y: "revenue", z: "format", fill: "group"})
 * ```
 *
 * Creates new channels **y1** and **y2**, obtained by stacking the original
 * **y** channel for data points that share a common **x** (and possibly **z**)
 * value. A new **y** channel is also returned, which lazily computes the middle
 * value of **y1** and **y2**. The input **y** channel defaults to a constant 1,
 * resulting in a count of the data points. The stack options (*offset*,
 * *order*, and *reverse*) may be specified as part of the *options* object, if
 * the only argument, or as a separate *stack* options argument.
 *
 * @link https://github.com/observablehq/plot/blob/main/README.md#stack
 */
export function stackY(stack?: {}, options?: {}, ...args: any[]): any;
/**
 * ```js
 * Plot.stackY1({x: "year", y: "revenue", z: "format", fill: "group"})
 * ```
 *
 * Equivalent to
 * [Plot.stackY](https://github.com/observablehq/plot/blob/main/README.md#plotstackystack-options),
 * except that the **y1** channel is returned as the **y** channel. This can be
 * used, for example, to draw a line at the bottom of each stacked area.
 *
 * @link https://github.com/observablehq/plot/blob/main/README.md#stack
 */
export function stackY1(stack?: {}, options?: {}, ...args: any[]): any;
/**
 * ```js
 * Plot.stackY2({x: "year", y: "revenue", z: "format", fill: "group"})
 * ```
 *
 * Equivalent to
 * [Plot.stackY](https://github.com/observablehq/plot/blob/main/README.md#plotstackystack-options),
 * except that the **y2** channel is returned as the **y** channel. This can be
 * used, for example, to draw a line at the top of each stacked area.
 *
 * @link https://github.com/observablehq/plot/blob/main/README.md#stack
 */
export function stackY2(stack?: {}, options?: {}, ...args: any[]): any;
export function maybeStackX({ x, x1, x2, ...options }?: {
    x: any;
    x1: any;
    x2: any;
}): any;
export function maybeStackY({ y, y1, y2, ...options }?: {
    y: any;
    y1: any;
    y2: any;
}): any;
