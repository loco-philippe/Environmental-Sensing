/**
 * ```js
 * Plot.area(aapl, {x1: "Date", y1: 0, y2: "Close"})
 * ```
 *
 * Returns a new area with the given *data* and *options*. Plot.area is rarely
 * used directly; it is only needed when the baseline and topline have neither
 * common *x* nor *y* values.
 * [Plot.areaY](https://github.com/observablehq/plot/blob/main/README.md#plotareaydata-options)
 * is used in the common horizontal orientation where the baseline and topline
 * share *x* values, while
 * [Plot.areaX](https://github.com/observablehq/plot/blob/main/README.md#plotareaxdata-options)
 * is used in the vertical orientation where the baseline and topline share *y*
 * values.
 */
export function area(data: any, options: any): Area;
/**
 * ```js
 * Plot.areaX(aapl, {y: "Date", x: "Close"})
 * ```
 *
 * Returns a new area with the given *data* and *options*. This constructor is
 * used when the baseline and topline share *y* values, as in a time-series area
 * chart where time goes up↑. If neither the **x1** nor **x2** option is
 * specified, the **x** option may be specified as shorthand to apply an
 * implicit [stackX
 * transform](https://github.com/observablehq/plot/blob/main/README.md#plotstackxstack-options);
 * this is the typical configuration for an area chart with a baseline at *x* =
 * 0. If the **x** option is not specified, it defaults to the identity
 * function. The **y** option specifies the **y1** channel; and the **y1** and
 * **y2** options are ignored.
 *
 * If the **interval** option is specified, the [binY
 * transform](https://github.com/observablehq/plot/blob/main/README.md#bin) is
 * implicitly applied to the specified *options*. The reducer of the output *x*
 * channel may be specified via the **reduce** option, which defaults to
 * *first*. To default to zero instead of showing gaps in data, as when the
 * observed value represents a quantity, use the *sum* reducer.
 *
 * ```js
 * Plot.areaX(observations, {y: "date", x: "temperature", interval: d3.utcDay})
 * ```
 *
 * The **interval** option is recommended to “regularize” sampled data; for
 * example, if your data represents timestamped temperature measurements and you
 * expect one sample per day, use d3.utcDay as the interval.
 */
export function areaX(data: any, options: any): Area;
/**
 * ```js
 * Plot.areaY(aapl, {x: "Date", y: "Close"})
 * ```
 *
 * Returns a new area with the given *data* and *options*. This constructor is
 * used when the baseline and topline share *x* values, as in a time-series area
 * chart where time goes right→. If neither the **y1** nor **y2** option is
 * specified, the **y** option may be specified as shorthand to apply an
 * implicit [stackY
 * transform](https://github.com/observablehq/plot/blob/main/README.md#plotstackystack-options);
 * this is the typical configuration for an area chart with a baseline at *y* =
 * 0. If the **y** option is not specified, it defaults to the identity
 * function. The **x** option specifies the **x1** channel; and the **x1** and
 * **x2** options are ignored.
 *
 * If the **interval** option is specified, the [binX
 * transform](https://github.com/observablehq/plot/blob/main/README.md#bin) is
 * implicitly applied to the specified *options*. The reducer of the output *y*
 * channel may be specified via the **reduce** option, which defaults to
 * *first*. To default to zero instead of showing gaps in data, as when the
 * observed value represents a quantity, use the *sum* reducer.
 *
 * ```js
 * Plot.areaY(observations, {x: "date", y: "temperature", interval: d3.utcDay)
 * ```
 *
 * The **interval** option is recommended to “regularize” sampled data; for
 * example, if your data represents timestamped temperature measurements and you
 * expect one sample per day, use d3.utcDay as the interval.
 */
export function areaY(data: any, options: any): Area;
export class Area extends Mark {
    constructor(data: any, options?: {});
    z: any;
    curve: import("d3-shape").CurveFactory | import("d3-shape").CurveBundleFactory | import("d3-shape").CurveCardinalFactory | import("d3-shape").CurveCatmullRomFactory;
    filter(index: any): any;
    render(index: any, scales: any, channels: any, dimensions: any, context: any): any;
}
import { Mark } from "../plot.js";
