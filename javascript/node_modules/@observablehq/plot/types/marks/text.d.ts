/**
 * Returns a new text mark with the given *data* and *options*. If neither the
 * **x** nor **y** nor **frameAnchor** options are specified, *data* is assumed
 * to be an array of pairs [[*x₀*, *y₀*], [*x₁*, *y₁*], [*x₂*, *y₂*], …] such
 * that **x** = [*x₀*, *x₁*, *x₂*, …] and **y** = [*y₀*, *y₁*, *y₂*, …].
 */
export function text(data: any, options?: {}): Text;
/**
 * Equivalent to
 * [Plot.text](https://github.com/observablehq/plot/blob/main/README.md#plottextdata-options),
 * except **x** defaults to the identity function and assumes that *data* =
 * [*x₀*, *x₁*, *x₂*, …].
 *
 * If an **interval** is specified, such as d3.utcDay, **y** is transformed to
 * (*interval*.floor(*y*) + *interval*.offset(*interval*.floor(*y*))) / 2. If
 * the interval is specified as a number *n*, *y* will be the midpoint of two
 * consecutive multiples of *n* that bracket *y*.
 */
export function textX(data: any, options?: {}): Text;
/**
 * Equivalent to
 * [Plot.text](https://github.com/observablehq/plot/blob/main/README.md#plottextdata-options),
 * except **y** defaults to the identity function and assumes that *data* =
 * [*y₀*, *y₁*, *y₂*, …].
 *
 * If an **interval** is specified, such as d3.utcDay, **x** is transformed to
 * (*interval*.floor(*x*) + *interval*.offset(*interval*.floor(*x*))) / 2. If
 * the interval is specified as a number *n*, *x* will be the midpoint of two
 * consecutive multiples of *n* that bracket *x*.
 */
export function textY(data: any, options?: {}): Text;
export class Text extends Mark {
    constructor(data: any, options?: {});
    rotate: any;
    textAnchor: any;
    lineAnchor: string;
    lineHeight: number;
    lineWidth: number;
    monospace: boolean;
    fontFamily: any;
    fontSize: any;
    fontStyle: any;
    fontVariant: any;
    fontWeight: any;
    frameAnchor: string;
    render(index: any, scales: any, channels: any, dimensions: any, context: any): any;
}
import { Mark } from "../plot.js";
