/**
 * ```js
 * Plot.ruleX([0]) // as annotation
 * ```
 * ```js
 * Plot.ruleX(alphabet, {x: "letter", y: "frequency"}) // like barY
 * ```
 *
 * Returns a new rule↕︎ with the given *data* and *options*. In addition to the
 * [standard mark
 * options](https://github.com/observablehq/plot/blob/main/README.md#marks), the
 * following channels are optional:
 *
 * * **x** - the horizontal position; bound to the *x* scale
 * * **y1** - the starting vertical position; bound to the *y* scale
 * * **y2** - the ending vertical position; bound to the *y* scale
 *
 * If the **x** option is not specified, it defaults to the identity function
 * and assumes that *data* = [*x₀*, *x₁*, *x₂*, …]. If a **y** option is
 * specified, it is shorthand for the **y2** option with **y1** equal to zero;
 * this is the typical configuration for a vertical lollipop chart with rules
 * aligned at *y* = 0. If the **y1** channel is not specified, the rule will
 * start at the top of the plot (or facet). If the **y2** channel is not
 * specified, the rule will end at the bottom of the plot (or facet).
 *
 * If an **interval** is specified, such as d3.utcDay, **y1** and **y2** can be
 * derived from **y**: *interval*.floor(*y*) is invoked for each *y* to produce
 * *y1*, and *interval*.offset(*y1*) is invoked for each *y1* to produce *y2*.
 * If the interval is specified as a number *n*, *y1* and *y2* are taken as the
 * two consecutive multiples of *n* that bracket *y*.
 */
export function ruleX(data: any, options: any): RuleX;
/**
 * ```js
 * Plot.ruleY([0]) // as annotation
 * ```
 *
 * ```js
 * Plot.ruleY(alphabet, {y: "letter", x: "frequency"}) // like barX
 * ```
 *
 * Returns a new rule↔︎ with the given *data* and *options*. In addition to the
 * [standard mark
 * options](https://github.com/observablehq/plot/blob/main/README.md#marks), the
 * following channels are optional:
 *
 * * **y** - the vertical position; bound to the *y* scale
 * * **x1** - the starting horizontal position; bound to the *x* scale
 * * **x2** - the ending horizontal position; bound to the *x* scale
 *
 * If the **y** option is not specified, it defaults to the identity function
 * and assumes that *data* = [*y₀*, *y₁*, *y₂*, …]. If the **x** option is
 * specified, it is shorthand for the **x2** option with **x1** equal to zero;
 * this is the typical configuration for a horizontal lollipop chart with rules
 * aligned at *x* = 0. If the **x1** channel is not specified, the rule will
 * start at the left edge of the plot (or facet). If the **x2** channel is not
 * specified, the rule will end at the right edge of the plot (or facet).
 *
 * If an **interval** is specified, such as d3.utcDay, **x1** and **x2** can be
 * derived from **x**: *interval*.floor(*x*) is invoked for each *x* to produce
 * *x1*, and *interval*.offset(*x1*) is invoked for each *x1* to produce *x2*.
 * If the interval is specified as a number *n*, *x1* and *x2* are taken as the
 * two consecutive multiples of *n* that bracket *x*.
 */
export function ruleY(data: any, options: any): RuleY;
export class RuleX extends Mark {
    constructor(data: any, options?: {});
    insetTop: any;
    insetBottom: any;
    render(index: any, scales: any, channels: any, dimensions: any, context: any): any;
}
export class RuleY extends Mark {
    constructor(data: any, options?: {});
    insetRight: any;
    insetLeft: any;
    render(index: any, scales: any, channels: any, dimensions: any, context: any): any;
}
import { Mark } from "../plot.js";
