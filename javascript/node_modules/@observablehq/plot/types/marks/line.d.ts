/**
 * ```js
 * Plot.line(aapl, {x: "Date", y: "Close"})
 * ```
 *
 * Returns a new line with the given *data* and *options*. If neither the **x**
 * nor **y** options are specified, *data* is assumed to be an array of pairs
 * [[*x₀*, *y₀*], [*x₁*, *y₁*], [*x₂*, *y₂*], …] such that **x** = [*x₀*, *x₁*,
 * *x₂*, …] and **y** = [*y₀*, *y₁*, *y₂*, …].
 */
export function line(data: any, options?: {}): Line;
/**
 * ```js
 * Plot.lineX(aapl.map(d => d.Close))
 * ```
 *
 * Similar to
 * [Plot.line](https://github.com/observablehq/plot/blob/main/README.md#plotlinedata-options)
 * except that if the **x** option is not specified, it defaults to the identity
 * function and assumes that *data* = [*x₀*, *x₁*, *x₂*, …]. If the **y** option
 * is not specified, it defaults to [0, 1, 2, …].
 *
 * If the **interval** option is specified, the [binY
 * transform](https://github.com/observablehq/plot/blob/main/README.md#bin) is
 * implicitly applied to the specified *options*. The reducer of the output *x*
 * channel may be specified via the **reduce** option, which defaults to
 * *first*. To default to zero instead of showing gaps in data, as when the
 * observed value represents a quantity, use the *sum* reducer.
 *
 * ```js
 * Plot.lineX(observations, {y: "date", x: "temperature", interval: d3.utcDay})
 * ```
 *
 * The **interval** option is recommended to “regularize” sampled data; for
 * example, if your data represents timestamped temperature measurements and you
 * expect one sample per day, use d3.utcDay as the interval.
 */
export function lineX(data: any, options?: {}): Line;
/**
 * ```js
 * Plot.lineY(aapl.map(d => d.Close))
 * ```
 *
 * Similar to
 * [Plot.line](https://github.com/observablehq/plot/blob/main/README.md#plotlinedata-options)
 * except that if the **y** option is not specified, it defaults to the identity
 * function and assumes that *data* = [*y₀*, *y₁*, *y₂*, …]. If the **x** option
 * is not specified, it defaults to [0, 1, 2, …].
 *
 * If the **interval** option is specified, the [binX
 * transform](https://github.com/observablehq/plot/blob/main/README.md#bin) is
 * implicitly applied to the specified *options*. The reducer of the output *y*
 * channel may be specified via the **reduce** option, which defaults to
 * *first*. To default to zero instead of showing gaps in data, as when the
 * observed value represents a quantity, use the *sum* reducer.
 *
 * ```js
 * Plot.lineY(observations, {x: "date", y: "temperature", interval: d3.utcDay})
 * ```
 *
 * The **interval** option is recommended to “regularize” sampled data; for
 * example, if your data represents timestamped temperature measurements and you
 * expect one sample per day, use d3.utcDay as the interval.
 */
export function lineY(data: any, options?: {}): Line;
export class Line extends Mark {
    constructor(data: any, options?: {});
    z: any;
    curve: import("d3-shape").CurveFactory | import("d3-shape").CurveBundleFactory | import("d3-shape").CurveCardinalFactory | import("d3-shape").CurveCatmullRomFactory;
    filter(index: any): any;
    render(index: any, scales: any, channels: any, dimensions: any, context: any): any;
}
import { Mark } from "../plot.js";
