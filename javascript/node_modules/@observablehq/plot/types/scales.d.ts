export function Scales(channelsByScale: any, { inset, insetTop, insetRight, insetBottom, insetLeft, round, nice, clamp, zero, align, padding, ...options }?: {
    inset?: number | undefined;
    insetTop?: any;
    insetRight?: any;
    insetBottom?: any;
    insetLeft?: any;
    round: any;
    nice: any;
    clamp: any;
    zero: any;
    align: any;
    padding: any;
}): {};
export function ScaleFunctions(scales: any): {
    [k: string]: any;
};
export function autoScaleRange({ x, y, fx, fy }: {
    x: any;
    y: any;
    fx: any;
    fy: any;
}, dimensions: any): void;
export function normalizeScale(key: any, scale: any, hint: any): any;
export function isTemporalScale({ type }: {
    type: any;
}): boolean;
export function isOrdinalScale({ type }: {
    type: any;
}): boolean;
export function isThresholdScale({ type }: {
    type: any;
}): boolean;
export function isDivergingScale({ type }: {
    type: any;
}): boolean;
export function scaleOrder({ range, domain }: {
    range: any;
    domain?: any;
}): number;
export function isCollapsed(scale: any): boolean;
export function coerceNumbers(values: any): any;
export function coerceNumber(x: any): number;
export function coerceDate(x: any): Date | undefined;
/**
 * You can also create a standalone scale with Plot.**scale**(*options*). The
 * *options* object must define at least one scale; see [Scale
 * options](https://github.com/observablehq/plot/blob/main/README.md#scale-options)
 * for how to define a scale. For example, here is a linear color scale with the
 * default domain of [0, 1] and default scheme *turbo*:
 *
 * ```js
 * const color = Plot.scale({color: {type: "linear"}});
 * ```
 *
 * #### Scale objects
 *
 * Both
 * [*plot*.scale](https://github.com/observablehq/plot/blob/main/README.md#plotscalescalename)
 * and
 * [Plot.scale](https://github.com/observablehq/plot/blob/main/README.md#plotscaleoptions)
 * return scale objects. These objects represent the actual (or “materialized”)
 * scale options used by Plot, including the domain, range, interpolate
 * function, *etc.* The scale’s label, if any, is also returned; however, note
 * that other axis properties are not currently exposed. Point and band scales
 * also expose their materialized bandwidth and step.
 *
 * To reuse a scale across plots, pass the corresponding scale object into
 * another plot specification:
 *
 * ```js
 * const plot1 = Plot.plot(…);
 * const plot2 = Plot.plot({…, color: plot1.scale("color")});
 * ```
 *
 * For convenience, scale objects expose a *scale*.**apply**(*input*) method
 * which returns the scale’s output for the given *input* value. When
 * applicable, scale objects also expose a *scale*.**invert**(*output*) method
 * which returns the corresponding input value from the scale’s domain for the
 * given *output* value.
 */
export function scale(options?: {}): any;
export function exposeScales(scaleDescriptors: any): (key: any) => any;
